#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<windows.h>

#define ROW 10
#define COL 10
#define KEY 5

void InitBoard(char board[ROW][COL], int row, int col);
void PlayBoard(char board[ROW][COL], int row, int col);
void Player(char board[ROW][COL], int row, int col);
void Computer(char board[ROW][COL], int row, int col);
char IsWin(char board[ROW][COL], int row, int col, int key);

#define _CRT_SECURE_NO_WARNINGS 1

#include"chest.h"

void test()
{
	int ra = 0;
	char chara = {0};
	char board[ROW][COL] = {0};
	InitBoard(board,ROW,COL);//��ʼ��
    system("cls"); 
	ra = rand()%100+1;
	//printf("%d\n\n\n\n\n",ra);
	 if(ra > 50)
	 {
		 printf("Computer frist\n");
		 goto cum;
	 }
	 else printf("You frist\n");
  while(1)
  {
	
	//��ӡ����
	PlayBoard(board,ROW,COL);
	Player(board,ROW,COL);
	system("cls");
	PlayBoard(board,ROW,COL);
	
	chara = IsWin(board,ROW,COL,KEY);
	if(chara != 'C')
	{
		break;
	}
	Sleep(1000);
	system("cls");
	cum:
	Computer(board,ROW,COL);
    chara = IsWin(board,ROW,COL,KEY);
    if(chara != 'C')
	{
		break;
	}
  }
  if(chara == '$')
  {
	  system("cls");
	  printf("You win!\n");
  }
  else if(chara == '*')
  {
	  system("cls");
	  printf("You lose!\n");
  }
  else 
  {
	  system("cls");
	  printf("It ends in a draw.\n");
  }
  PlayBoard(board,ROW,COL);
}
void menu()
{
	printf("###############################################\n");
	printf("##############        1.play      #############\n");
	printf("##############        0.exit      #############\n");
	printf("###############################################\n");
}
int main()
{
	int input;
	srand((unsigned int ) time (NULL));
	menu();
	do
   {
	   scanf("%d",&input);
	   switch(input)
	   {
	   case 1:
		   test();
		   menu();
		   break;
	   case 0:
		   printf("End of the game.\n");
		   break;
	   default:
		   printf("Error!Please re-enter.\n");
		   break;
	   }  
    }
   while(input);
   return 0;
}#define _CRT_SECURE_NO_WARNINGS 1

#include"chest.h"
void InitBoard(char board[ROW][COL], int row, int col)//���飨���̣���ʼ��
{
	int i = 0;
	int j = 0;
	for(i = 0; i < row; i++)
	{
		for(j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}

void PlayBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for(i = 0; i < row; i++)
	{
		for(j = 0; j < col; j++)
		{
			printf(" %c ",board[i][j]);
		   if(j < col -1)
		   {   
			printf("|");
		   }
		}
		    putchar('\n');
	 if(i < row - 1)
	 {
         for(j = 0; j < col; j++)
		 {
			printf("---");
		   if(j < col -1)
		   {   
			printf("|");
		   }
		 }
	 }
          putchar('\n');
	}
}

void Player(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	while(1)
	{
	  puts("Please enter->:");
	  scanf("%d%d",&x,&y);
	  if(x > 0 && x < row + 1 && y > 0 && y < col + 1)
	  {
		  if(board[x-1][y-1] != ' ')
		  {
		      printf("This seat was taken!");
		  }
		  else if(board[x-1][y-1] == ' ')
		  {
		      board[x-1][y-1] = '$';break;
		  }
	  }
	  else  printf("Error!It is illegal!");
	}
}

void Computer(char board[ROW][COL], int row, int col)
{
  while(1)
  {
	int x = rand()%row;
	int y = rand()%col;
	 if(board[x][y] == ' ')
     {
		  board[x][y] = '*';
		  break;
	 }
  }
}#define _CRT_SECURE_NO_WARNINGS 1

#include"chest.h"
char IsWin(char board[ROW][COL], int row, int col, int key)
{
	register int i = 0;
	register int j = 0;
	register int k = 0;
	int m = 0;
	int n = 0;
	//�ж���
	for(i = 0; i < row; i++)
	{
		for (j = 0; j < col - 1; j++)
		{
			if(board[i][j] == board[i][j+1] && board[i][j] != ' ')
			{
				k++;
			}
			else 
			{
				k = 0;
			}
			if(key - 1 == k)
			{
				return board[i][j];
			}
		}
	}
	//�ж���
		for (j = 0; j < col; j++)
	{
		for(i = 0; i < row - 1; i++)
		{
			if(board[i][j] == board[i+1][j] && board[i][j] != ' ')
			{
				k++;
			}
			else 
			{
				k = 0;
			}
			if(key - 1 == k)
			{
				return board[i][j];
			}
		}
	}
		//�ж�б��
		//1.��б
		for(i = 0; i <= row - key; i++)
		{
			for(j = 0; j <= col - key; j++)
			{
				m = i;
				n = j;
				while(m < m + key -1)
				{
					if(board[m][n] == board [m+1][n+1] && board[m][n] != ' ')
					{
						k++;
					}
					else
					{
						k = 0;
						break;
					}
					if(key - 1 == k)
					{
						return board[m][n];
					}
					m++;
					n++;
				}
			}
		}
    //��б
    for(i = 0; i <= row - key; i++)
		{
			for(j = col -1; j >= key - 1; j--)
			{
				m = i;
				n = j;
				while(m < m + key - 1)
				{
					if(board[m][n] == board [m+1][n-1] && board[m][n] != ' ')
					{
						k++;
					}
					else
					{
						k = 0;
						break;
					}
					if(key - 1 == k)
					{
						return board[m][n];
					}
					m++;
					n--;
				}
			}
		}
//��������
	for(i = 0; i < row; i++)
		for(j = 0; j < col; j++)
		{
			if(board[i][j] == ' ')
			{
				return 'C';
			}
		}
	return '-';
}
